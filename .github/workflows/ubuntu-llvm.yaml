name: ubuntu-llvm
on: [push]

jobs:
  build:
    name: ${{ matrix.os }}-libjstack-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        build_type: [Debug, Release]
        clang_version: [11]
        include:
          - triplet: x64-linux
            generator: Unix Makefiles

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Start Pg
        shell: bash
        run: sudo systemctl start postgresql.service

      - name: Test Pg
        shell: bash
        run: sudo -u postgres psql -d postgres -c "SELECT 1"

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Install dependencies
        shell: bash
        run: sudo apt-get install python3-pip libboost-filesystem-dev libboost-system-dev libboost-test-dev libssl-dev libpq-dev libpqtypes-dev postgresql-server-dev-all libcurl4-openssl-dev llvm

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: cmake -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER="/usr/bin/clang-${{ matrix.clang_version }}" -DCMAKE_CXX_COMPILER="/usr/bin/clang++-${{ matrix.clang_version }}" -DCODE_COVERAGE=On ${{ github.workspace }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Add Pg test user
        shell: bash
        run: sudo -u postgres psql -d postgres -c "CREATE USER libjstack WITH PASSWORD 'libjstack'"

      - name: Add Pg test database
        shell: bash
        run: sudo -u postgres psql -d postgres -c "CREATE DATABASE libjstack_test OWNER libjstack"

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: bash
        env:
          LLVM_PROFILE_FILE: ${{ github.workspace }}/build/profile.profraw
        run: ctest -C ${{ matrix.build_type }} -V --extra-verbose --rerun-failed --output-on-failure

      - name: Cov-0
        run: llvm-profdata-${{ matrix.clang_version }} merge --version

      - name: Cov-1
        if: ${{ matrix.build_type == 'Debug' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        env:
          LLVM_PROFILE_FILE: ${{ github.workspace }}/build/profile.profraw
        run: llvm-profdata-${{ matrix.clang_version }} merge -sparse $LLVM_PROFILE_FILE -o coverage.profdata

      - name: Cov-2
        if: ${{ matrix.build_type == 'Debug' }}
        working-directory: ${{ github.workspace }}/build
        run: llvm-cov-${{ matrix.clang_version }} show ./test/libjstack.tests -instr-profile=coverage.profdata > coverage.txt

      - name: Upload codecov
        if: ${{ matrix.build_type == 'Debug' }}
        working-directory: ${{ github.workspace }}/build
        run: bash <(curl -s https://codecov.io/bash)